worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 100000;

events {
    worker_connections 10240;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # don't write to disk
    proxy_request_buffering off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 300s;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75 -- maybe you prefer higher but I prefer lower
    # with CF doesn't matter much (does for paid plans)
    keepalive_timeout 300s;
    keepalive_requests 10000; # Número de solicitudes por conexión, aumenta según necesidad
    types_hash_max_size 2048; # Tamaño para el hash de tipos MIME, ajusta si tienes muchos tipos

    # These are what we call a NGINX config directives that I'm too lazy to explain
    # here https://nginx.org/en/docs/
    sendfile_max_chunk 512k;
    server_tokens off;
    server_name_in_redirect off;

    client_max_body_size 300M;
    client_header_timeout 300s;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k; 

    output_buffers 1 32k; 
    postpone_output 1460; 

    set_real_ip_from 0.0.0.0/0;         
    real_ip_header X-Forwarded-For;     
    real_ip_recursive on;

    # Open file cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;

    # FastCGI Cache
    fastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=WORDPRESS:100m
                     inactive=60m use_temp_path=off;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header updating http_500;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 256;
    gzip_comp_level 8;
    gzip_buffers 8 16k;
    gzip_proxied any;
    gzip_disable "msie6";
    gzip_types
      application/atom+xml
      application/geo+json
      application/javascript
      application/x-javascript
      application/json
      application/ld+json
      application/manifest+json
      application/rdf+xml
      application/rss+xml
      application/vnd.ms-fontobject
      application/wasm
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/eot
      font/otf
      font/ttf
      image/bmp
      image/svg+xml
      text/cache-manifest
      text/calendar
      text/css
      text/javascript
      text/markdown
      text/plain
      text/xml
      text/vcard
      text/vnd.rim.location.xloc
      text/vtt
      text/x-component
      text/x-cross-domain-policy;
    etag on;

    server {
        listen 80;
        server_name example.com;
        root /var/www/html;

        client_max_body_size 100M;

        error_log  /dev/stderr warn;
        access_log /dev/stdout main;

        index index.php;

        # Static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|eot|ttf|otf|woff2?)$ {
            add_header Access-Control-Allow-Origin *;
            expires 30d;
            add_header Cache-Control "public";
            access_log off;
            try_files $uri $uri =404;
        }

        # Deny sensitive files
        location ~* /(wp-config.php|readme.html|license.txt) {
            deny all;
        }

        # Main location
        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        # PHP processing with FastCGI Cache
        location ~ \.php$ {
            # regex to split $uri to $fastcgi_script_name and $fastcgi_path
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            # Bypass the fact that try_files resets $fastcgi_path_info
            # see: http://trac.nginx.org/nginx/ticket/321
            set $path_info $fastcgi_path_info;
            fastcgi_param PATH_INFO $path_info;
            fastcgi_pass wordpress:9000;
            fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
            fastcgi_param  QUERY_STRING       $query_string;
            fastcgi_param  REQUEST_METHOD     $request_method;
            fastcgi_param  CONTENT_TYPE       $content_type;
            fastcgi_param  CONTENT_LENGTH     $content_length;

            fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
            fastcgi_param  REQUEST_URI        $request_uri;
            fastcgi_param  DOCUMENT_URI       $document_uri;
            fastcgi_param  DOCUMENT_ROOT      $document_root;
            fastcgi_param  SERVER_PROTOCOL    $server_protocol;
            fastcgi_param  REQUEST_SCHEME     $scheme;
            fastcgi_param  HTTPS              $https if_not_empty;

            fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
            fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

            fastcgi_param  REMOTE_ADDR        $remote_addr;
            fastcgi_param  REMOTE_PORT        $remote_port;
            fastcgi_param  SERVER_ADDR        $server_addr;
            fastcgi_param  SERVER_PORT        $server_port;
            fastcgi_param  SERVER_NAME        $server_name;
            fastcgi_param  HTTP_X_REAL_IP     $remote_addr;

            # PHP only, required if PHP was built with --enable-force-cgi-redirect
            fastcgi_param  REDIRECT_STATUS    200;
            fastcgi_send_timeout 300s;
            fastcgi_read_timeout 300s;

            fastcgi_buffers 16 32k;
            fastcgi_buffer_size 64k;
            fastcgi_busy_buffers_size 64k;
            fastcgi_index index.php;

            # Cache settings
            set $no_cache 0;
            if ($request_method !~ ^(GET|HEAD)$) {
                set $no_cache 1;
            }
            if ($query_string != "") {
                set $no_cache 1;
            }
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
            fastcgi_cache WORDPRESS;
            fastcgi_cache_valid 200 5m;
            fastcgi_cache_valid 301 302 1m;
            add_header X-Cache $upstream_cache_status;
        }

        # Limit allowed methods
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            return 444;
        }
    }
}
